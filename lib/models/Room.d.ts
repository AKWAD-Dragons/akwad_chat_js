import { Participant } from "./Participant";
import { Message } from "./Message";
import firebase = require("firebase");
import { FirebaseChatConfigs } from "../FirebaseChatConfigs";
import { SendMessageTask, _SingleUploadTask } from "../SendTask";
import { ChatAttachment } from "./ChatAttachment";
import { BehaviorSubject, Subscribable } from "rxjs";
export declare class Room {
    id?: string;
    name?: string;
    image?: string;
    participants?: Participant[];
    messages?: Message[];
    meta_data?: Map<String, any>;
    last_message?: Message;
    last_message_index?: number;
    _dbr: firebase.database.Reference;
    _configs: FirebaseChatConfigs;
    userRoomData?: Map<String, any>;
    _ignoredFirstMessagesOnValue: boolean;
    _roomSubject: BehaviorSubject<Room | undefined>;
    _messagesSubject: BehaviorSubject<Message | undefined>;
    constructor(id: string, name: string, image: string, participants: Participant[], messages: Message[], meta_data: Map<string, any>, last_message: Message);
    getRoomName: () => string;
    getRoomLink: () => string;
    getMessagesLink: () => string;
    getRoomListener(): Promise<BehaviorSubject<Room | undefined>>;
    getRoom(): Promise<Room>;
    getUnreadMessagesCount(): number;
    _setUserRoomData(force?: boolean): Promise<void>;
    _setThisFromRoom(room: Room | null): void;
    getMessages(): Promise<Message[]>;
    getMessagesListener(): Promise<Subscribable<Message | undefined>>;
    parseRoomFromSnapshotValue(roomJson: Map<String, any> | null): Room | null;
    _parseMessagesFromSnapshotValue(snapShotValue: Map<String, any>): Message[];
    send(msg: Message): SendMessageTask;
    _createUploadAttachmentsTasks(attachments: ChatAttachment[]): Map<String, _SingleUploadTask>;
    deleteAllMessages(): boolean;
    markAsRead(): Promise<void>;
    isSeen(msg: Message): boolean;
}
